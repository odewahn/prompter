{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prompter","text":"<p>Prompter is a tool for scripting text transformations with OpenAI.</p> <p></p> <p>It lets you:</p> <ul> <li>Load text from files or EPUBs into a database</li> <li>Transform text using a variety of transformations. For example, convert an EPUB to markdown, split a long block into smaller blocks, or split a block into sentences. A lot of this work is required to fit the text into the LLM's token limit.</li> <li>Filter out blocks of text. For example, you might only want to process one chapter in a book.</li> <li>Apply templated prompts to your blocks and send them to an LLM. You can use context in your prompts to make them more dynamic. For example, you might have a context file with keys like <code>title</code>, <code>author</code>, and <code>topic</code>. You can include these keys in your prompt templates.</li> </ul> <p>You can create simple scripts so that you can automate many commaon transformation tasks:</p> <pre><code>load test.epub\ntransform html-to-md token-split --n=5000\ncomplete summarize-block.task\nsquash\ncomplete cleanup-summary.task\nretag summary-{{block_tag}}.md\nwrite\n</code></pre>"},{"location":"command-ref/","title":"Command Reference","text":""},{"location":"command-ref/#core-features","title":"Core Features","text":""},{"location":"command-ref/#load","title":"load","text":"<p>Load a file or files as a new group.</p> <ul> <li>Arguments:</li> <li><code>files</code> (required): List of files or URLs to load.</li> <li><code>--tag</code> (optional): Tag to use for the group.</li> <li>Example:</li> </ul> <pre><code>load *.txt --tag=text_files\n\nload book.epub\n\nload http://example.com\n</code></pre>"},{"location":"command-ref/#transform","title":"transform","text":"<p>Transform a block using specified transformations. If you chain multiple transformations together, they are applied in the order they are specified.</p> <ul> <li>Arguments:</li> <li><code>transformation</code> (required): Transformations to apply. Available transformations are:<ul> <li><code>token-split</code>: Breaks text into overlapping chunks of 1000 tokens overlapping by 10%.</li> <li><code>clean-epub</code>: Simplifies the HTML of an EPUB.</li> <li><code>html-h1-split</code>: Breaks HTML into blocks based on H1 tags.</li> <li><code>html-h2-split</code>: Breaks HTML into blocks based on H1 and H2 tags.</li> <li><code>html-to-md</code>: Converts HTML to Markdown.</li> <li><code>html-to-txt</code>: Converts HTML to plain text.</li> <li><code>new-line-split</code>: Splits text into blocks based on new lines.</li> <li><code>sentence-split</code>: Splits text into blocks based on sentences.</li> <li><code>strip-attributes</code>: Remove all attributes from HTML tags.</li> <li><code>extract-headers</code>: Extract HTML headers (through h4)</li> </ul> </li> <li><code>--tag</code> (optional): Tag to use for the group.</li> <li><code>--where</code> (optional): Where clause for the blocks.</li> <li><code>--n</code> (optional): Number of tokens to split (default: 1000).</li> <li><code>--overlap</code> (optional): Overlap percentage (as an integer) for token-split (default: 10).</li> <li>Examples:</li> </ul> <pre><code>transform clean-epub --tag=cleaned --where=\"block_tag like 'ch%'\"\n\ntransform html-to-md token-split --n=1500\n</code></pre>"},{"location":"command-ref/#complete","title":"complete","text":"<p>Complete a block using OpenAI.</p> <ul> <li>Arguments:</li> <li><code>task</code> (required): Filename or URL of the task template.</li> <li><code>--persona</code> (optional): Filename or URL of the persona template.</li> <li><code>--context</code> (optional): context file (default: DEFAULT_CONTEXT_FN).</li> <li><code>--tag</code> (optional): Tag to use for the group.</li> <li><code>--model</code> (optional): Model to use (default: OPENAI_DEFAULT_MODEL).</li> <li><code>--temperature</code> (optional): Temperature to use (default: OPENAI_DEFAULT_TEMPERATURE).</li> <li><code>--where</code> (optional): Where clause for the blocks.</li> <li>Example: <pre><code>complete summarize.jinja --tag=summary --model=gpt-4o --temperature=0.3\n</code></pre></li> </ul>"},{"location":"command-ref/#run","title":"run","text":"<p>Run a file containing of prompter commands. For example, the following file of commands would allow you to summarize an epub file:</p> <pre><code>set FN test.epub\nload {{FN}}\nselect \"block_tag like 'chapter%'\"\ntransform clean-epub html-to-md token-split --n=1500\ncomplete summarize-block.task\nsquash\ncomplete cleanup-summary.task\nretag summary-{{block_tag}}.md\nwrite\n</code></pre> <ul> <li>Arguments:</li> <li><code>fn</code> (required): File or URL to run.</li> <li>Example: <pre><code>run script.prompter\n</code></pre></li> </ul>"},{"location":"command-ref/#browse","title":"browse","text":"<p>Opens a browser application so that you can view data, run commands, and experiement with different prompts.</p> <p></p>"},{"location":"command-ref/#data-management","title":"Data Management","text":""},{"location":"command-ref/#use","title":"use","text":"<p>Specifiy the name of the SQLite database you want to use to store your data. This database will be created in the current working directory. If you change the working directory, prompter will create a new database in the new directory using the same name.</p> <ul> <li>Arguments:</li> <li><code>db_name</code> (required): Database name to use.</li> <li>Example: <pre><code>use summary.db\n</code></pre></li> </ul>"},{"location":"command-ref/#blocks","title":"blocks","text":"<p>List all blocks.</p> <ul> <li>Arguments:</li> <li><code>--where</code> (optional): Where clause for the blocks.</li> <li>Example: <pre><code>blocks --where=\"block_tag like 'ch%'\"\n</code></pre></li> </ul>"},{"location":"command-ref/#groups","title":"groups","text":"<p>List all groups.</p> <ul> <li>Arguments:</li> <li><code>--where</code> (optional): Where clause for the group.</li> <li>Example: <pre><code>groups --where=\"group_tag like 'my_group%'\"\n</code></pre></li> </ul>"},{"location":"command-ref/#checkout","title":"checkout","text":"<p>Checkout a group.</p> <ul> <li>Arguments:</li> <li><code>tag</code> (required): Tag to checkout. This can be:<ul> <li>tag: the name of the group to checkout</li> <li><code>latest</code>: checkout the latest group</li> <li><code>first</code>: checkout the first group</li> <li><code>next</code>: checkout the next group</li> <li><code>previous</code>: checkout the previous group</li> </ul> </li> <li>Example: <pre><code>checkout my_group\n</code></pre></li> </ul>"},{"location":"command-ref/#squash","title":"squash","text":"<p>Squash the current group into a new group by tag. Use this to combine blocks into a single block.</p> <ul> <li>Arguments:</li> <li><code>--delimiter</code> (optional): Delimiter to use (default: \"\\n\").</li> <li><code>--tag</code> (optional): Tag for the new group.</li> <li>Example: <pre><code>squash --delimiter=\"\\n\\n\" --tag=squashed_group\n</code></pre></li> </ul>"},{"location":"command-ref/#generating-output","title":"Generating Output","text":""},{"location":"command-ref/#write","title":"write","text":"<p>Write the current group to a file.</p> <ul> <li>Arguments:</li> <li><code>--fn</code> (optional): Filename pattern (jinja2) to write to (default: \"{{block_tag}}\").</li> <li><code>--where</code> (optional): Where clause for the blocks.</li> <li>Examples:   Write each block to a file named after its tag:   <pre><code>write --fn=\"output/{{block_tag}}.txt\"\n</code></pre></li> </ul>"},{"location":"command-ref/#speak","title":"speak","text":"<p>Convert the current block to audio files.</p> <ul> <li>Arguments:</li> <li><code>--fn</code> (optional): Filename pattern (jinja2) to write to (default: \"{{block_tag.split('.') | first}}-{{ '%04d' % position}}.mp3\").</li> <li><code>--where</code> (optional): Where clause for the blocks.</li> <li><code>--voice</code> (optional): Voice to use (default: \"alloy\").</li> <li><code>--preview</code> (optional): Preview the filenames.</li> <li>Example:</li> </ul> <pre><code>speak --fn=\"audio/{{block_tag}}.mp3\" --voice=alloy\n</code></pre>"},{"location":"command-ref/#environment-management","title":"Environment Management","text":"<p>Environment variables allow you to create symbols you can use in instructions, rather than literal strings. For example, you might use environment variables to set a source URL for the location of your task and persona prompts. When the script is run, the environment variables are replaced with their values. For example:</p> <pre><code>set SOURCE https://example.com\n</code></pre> <p>And then you can do something like this:</p> <pre><code>complete {{SOURCE}}/summarize.md --persona={{SOURCE}}/persona.md\n</code></pre> <p>You can pass environment variable into your scripts when they starts by creating a (bash) variable that begins with <code>PROMPTER\\_</code>. (Note that the \"PROMPTER_\" prefix will be stripped off.) For example, an environment variable created with <code>export PROMPTER_ENV=dev</code> automantically becomes available in the prompter environment as <code>ENV=dev</code>.</p>"},{"location":"command-ref/#set","title":"set","text":"<p>Set an environment variable.</p> <ul> <li>Arguments:</li> <li><code>key</code> (required): Key to set.</li> <li><code>value</code> (required): Value to set.</li> <li>Example: <pre><code>set SOURCE https://example.com\n</code></pre></li> </ul>"},{"location":"command-ref/#unset","title":"unset","text":"<p>Remove an environment variable.</p> <ul> <li>Arguments:</li> <li><code>key</code> (required): Key to remove.</li> <li>Example: <pre><code>unset SOURCE\n</code></pre></li> </ul>"},{"location":"command-ref/#other-commands","title":"Other Commands","text":""},{"location":"command-ref/#version","title":"version","text":"<p>Print the version of the application.</p> <ul> <li>Example: <pre><code>version\n</code></pre></li> </ul>"},{"location":"command-ref/#exit","title":"exit","text":"<p>Exit the REPL (Read-Eval-Print Loop).</p> <ul> <li>Example:</li> </ul> <pre><code>exit\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Here are a few samples.</p>"},{"location":"examples/#create-a-summary-from-an-epub","title":"Create a summary from an epub","text":""},{"location":"examples/#tasks","title":"Tasks","text":"<p>There are two key tasks: summarizing an individual block and then summarizing the summary. Here's the prompt to summarize the block, which is saved in a file called <code>task-summarize-block.md</code>:</p> <pre><code>Summarize the following block of text:\n\n{{content}}\n\nDo this in 250 words or fewer using markdown fomatting.  Focus on adding bullet lists.\n</code></pre> <p>Here's the prompt to summarize the summary, which is saved in a file called <code>task-summarize-summary.md</code>:</p> <pre><code>This is a summary of a chapter that was constucted from overlapping chunks of text from a longer work:\n\n{{content}}\n\nSummarize it into 250 words or fewer.\n</code></pre>"},{"location":"examples/#prompterfile","title":"Prompterfile","text":"<p>Here's the full program in a <code>Prompterfile</code>:</p> <pre><code>load test.epub\ntransform clean-epub html-to-md transform token-split --n=5000\ncomplete summarize-block.task\nsquash\ncomplete cleanup-summary.task\nretag summary-{{block_tag}}.md\nwrite\n</code></pre>"},{"location":"examples/#get-the-gist-of-a-book-using-chapter-headers","title":"Get the gist of a book using chapter headers","text":""},{"location":"installation/","title":"Installation","text":"<p>Prompter runs on OSX and Linux. You'll find the latest release on the project's releases page.</p>"},{"location":"installation/#osx","title":"OSX","text":"<p>Download and install the package. Even though this is a Python prject, the release is a compiled binary and will require no other dependencies.</p>"},{"location":"installation/#linux","title":"Linux","text":"<p>You can download the binary and run it directly. Here's how you can do it on Ubuntu:</p> <pre><code>wget https://github.com/odewahn/prompter/releases/download/0.6.1/prompter.ubuntu\nmv prompter.ubuntu prompter\nchmod +x prompter\n</code></pre>"},{"location":"installation/#authentication-with-openai","title":"Authentication with OpenAI","text":"<p>Prompter requires an API key from OpenAI. You can get one by signing up for an account at OpenAI. Once you have an account, you can find your API key on the API settings page.</p> <p>Once you have your API key, you can set it as an environment variable like this:</p> <pre><code>export OPENAI_API_KEY=your-api-key\n</code></pre> <p>Prompter will warn you if you haven't set this variable.</p>"}]}